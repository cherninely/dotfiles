#!/usr/bin/env bash

# ####################
# INIT
# ####################

if [[ $# < 2 ]]; then
    echo 'Usage:'
    echo '. wcnew wc1 images3'
    echo '. wcnew wc1 images3+video3+web3'
    echo '. wcnew wc1 images_touch_phone -m # развернуть и собрать'
    echo 'wcnew wc1 images_touch_phone -mt # развернуть, собрать и запустить tmux-сессию с именем рабочей копии'
    echo ''
    echo 'Такая конструкция («. wcnew») приводит к запуску не в дочернем, а в текущем шелле,'
    echo 'что обеспечивает сохранение выбранной в скрипте директории.'
    exit
fi

#
# filter, rearrange and read opts
eval set -- "`getopt -o "m,t,b:" --long "make,tmux,branch" -- "$@"`"
while [[ $1 != --  ]]; do case $1 in
    -m|--make) IS_MAKE=1;;
    -t|--tmux) IS_TMUX=1;;
#   -b|--branch) CLONE_BRANCH=$2; shift 1;;
    *) echo "Unknown param"
esac; shift 1; done
shift 1; # remove divider (--)

readonly WC_NAME=$1
readonly RAW_PROJECTS=$2
readonly YXWEB_PATH=report/templates/YxWeb
NEXT_ACTIONS_HINT=$(echo -e "\033[32m\n Дальнейшие действия:")


# ####################
# COMMON FUNCTIONS
# ####################

function trim_multiline()
{
    sed -r 's/^\s+|\s+$//g'
}

function open_or_print {
    [[ $(uname) = Darwin && $(which open) ]] && open $1 || echo $1
}


# ####################
#
# FIJI PREPROCESSING
#
# FIJI is the Union Repos of MM
#
# ####################

# список fiji-проектов
# delimeter="\n"
# @example images3 video_touch_phone
fiji_projects="$(cat ~/dotfiles/fiji-projects | sort)"
echo -e debug "fiji_projects:\n" "$fiji_projects"

# список проектов переданных вторым параметром
# Заменить разделитель "+" на "\n"
given_projects="$(echo $RAW_PROJECTS | sed -r 's/\+/\n/g' | sort)"
echo -e debug "given_projects:\n" "$given_projects"

# только не fiji-проекты
given_no_fiji_projects="$(comm -13 <(echo "$fiji_projects") <(echo "$given_projects") | trim_multiline)"
echo -e debug "given_no_fiji_projects:\n" "$given_no_fiji_projects"

# Если ли в списке проектов для развёртывания fiji-проекты
given_fiji_projects="$(comm -12 <(echo "$fiji_projects") <(echo "$given_projects") | trim_multiline)"
echo -e debug "given_fiji_projects:\n" "$given_fiji_projects"

function get_fiji_projects_new_format()
{
    for project in ${given_fiji_projects//\\n/ }; do
        project="${project/3/_desktop}" #images3 -> images_deskpad
        project="${project/_//}" # video_touch_phone -> video/touch_phone
        project="${project//_/-}" # images_deskpad -> video/deskpad
        echo "$project"
    done
}
fiji_projects_new_format="$(get_fiji_projects_new_format)"
echo -e debug "fiji_projects_new_format:\n" "$fiji_projects_new_format"

# fiji-проекты (images3, video_touch_phone, и др.) удаляются из списка и заменяются на fiji
PROJECTS="$given_no_fiji_projects"
if [[ "$given_fiji_projects" ]]; then PROJECTS="fiji\n$PROJECTS"; fi

# ####################
# MAIN LOOP
# ####################

for PROJECT in ${PROJECTS//\\n/ }; do
    echo -e debug "PROJECT:\n" "$PROJECT"
    if [[ $PROJECT == fiji || $PROJECT == sansara ]]; then
        ORG=mm-interfaces
        ORG_ALIAS=mm
        REPO="$PROJECT"
    else
        ORG=serp
        ORG_ALIAS=serp
        REPO=${PROJECT//_/-}
    fi

    mkdir ~/$WC_NAME
    cd ~/$WC_NAME
    if [[ "$given_fiji_projects" ]]; then

        git clone git@github.yandex-team.ru:$ORG/$REPO .
        [ $? == 0 ] || exit 1

        # Закэшировать цель(-и) сборки
        # менять формат записи проектов на новый
        [[ "$fiji_projects_new_format" ]] && echo "$fiji_projects_new_format" > .project

        PROJECT_DIR="~/$WC_NAME"

    else

        mkdir -p ~/$WC_NAME/$YXWEB_PATH
        ln -s $YXWEB_PATH/$PROJECT $PROJECT
        cd $YXWEB_PATH
        git clone git@github.yandex-team.ru:$ORG/$REPO $PROJECT
        [ $? == 0 ] || exit 1

        PROJECT_DIR="~/$WC_NAME/$PROJECT"

    fi


    # Создаём симлинк video -> video2 (костыль для статики video2)
    [[ $PROJECT == video2 ]] && ln -s video2 video && echo 'Симлинки статики созданы'

    # Создаём симлинки web4 -> web3, web_touch_phone (костыль для статики)
    [[ $PROJECT == web4 ]] && ln -s web4 web3 && ln -s web4 web_touch_phone && echo 'Симлинки статики созданы'


    NEXT_ACTIONS_HINT="$NEXT_ACTIONS_HINT\ncd $PROJECT_DIR"

    if [[ $IS_MAKE ]]; then

        echo "Проект: $PROJECT";
        cd $PROJECT_DIR

        if [[ $PROJECT == web4 ]]; then
            make build # Чтобы не выполнять долгие тесты
        elif [[ $PROJECT == sansara ]]; then
            IS_SANSARA=true
        else
            make
        fi

    else

        NEXT_ACTIONS_HINT="$NEXT_ACTIONS_HINT && make"

    fi

    if [[ $ORG == "mm-interfaces" ]]; then

        if [[ $PROJECTS =~ sansara ]]; then
            if [[ $PROJECT == sansara ]]; then
                make start
                sleep 1
                open_or_print "http://sansara.ru:8888/images/search?text=Lamborghini"
            fi
        else
            open_or_print "$(wcurl)"
        fi
    fi

done

# Если развёрнута sansara, то собрать её в последнюю очередь,
# Чтобы были доступны уже собранные проекты
[[ $IS_MAKE && $IS_SANSARA ]] && cd ~/$WC_NAME/sansara && sudo make install # а просто make запускает сервер и браузер

# Вывести подсказки по дальнейшим действиям
echo -e "$NEXT_ACTIONS_HINT\033[0m"

# Создаем tmux-сессию для последнего проекта из цикла
if [[ $IS_TMUX == 1 ]]; then
    cd $PROJECT_DIR
    tmux -2 -S /tmp/tm-`whoami` new-session -s $WC_NAME "tmux source-file ~/dotfiles/.tmux-default-session-$ORG_ALIAS"
fi
