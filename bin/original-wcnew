#!/usr/bin/env bash
# alias wcnew # is a wrapper for doing `cd` at end of WC creating

# ####################
# INIT
# ####################

function help()
{

    echo "$GREEN"

    echo -e "wcnew wc-dir project[+preject[+...]] [-bmt]"

    echo -e "\n\
    --branch  -b  –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ git-–≤–µ—Ç–∫—É (–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –¥–æ —Å–±–æ—Ä–∫–∏, —Å–º –æ–ø—Ü–∏—é -m)\n\
    --make    -m  –°–æ–±—Ä–∞—Ç—å –ø–æ—Å–ª–µ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è\n\
    --tmux    -t  –û—Ç–∫—Ä—ã—Ç—å tmux —Å —Ä–∞–±–æ—á–µ–π –∫–æ–ø–∏–µ–π\n\
    --feature -f  –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –≤–µ—Ç–∫—É
    "

    echo -e "Examples:\n\
    wcnew tmp images3               # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç\n\
    wcnew tmp video_touch_phone -m  # –°–æ —Å–±–æ—Ä–∫–æ–π (--make)\n\
    wcnew tmp images/deskpad -m     # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç\n\
    wcnew tmp fiji -m               # –†–∞–∑–≤—ë—Ä—Ç—ã–≤–∞–Ω–∏–µ –∏ —Å–±–æ—Ä–∫–∞ —Ü–µ–ª–∏–∫–æ–º\n\
    wcnew wc1 images3/+video3       # –ù–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–µ–∫—Ç–æ–≤\n\
    wcnew tmp web4 --make           # –°–ï–†–ü (-m = make build)\n\
    wcnew wc2 images --branch feature --make # –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –Ω–∞ –Ω–æ–≤–æ–π –º–∞—à–∏–Ω–∫–µ https://yadi.sk/i/rgw1akC_gjJ8W\
    "

    echo "$RESET"

    exit 1

}

#
# filter, rearrange and read opts
eval set -- "`getopt -o "h,m,t,b:,f:" --long "help,make,tmux,branch:,feature:" -- "$@"`"
while [[ $1 != --  ]]; do case $1 in
    -h|--help) IS_HELP=1;;
    -m|--make) IS_MAKE=1;;
    -t|--tmux) IS_TMUX=1;;
    -b|--branch) CLONE_BRANCH=$2; shift 1;;
    -f|--feature) NEW_BRANCH=$2; shift 1;;
    *) echo "Unknown param"; IS_HELP=1;;
esac; shift 1; done
shift 1; # remove divider (--)

if [[ $IS_HELP ]]; then
    help
fi

if [[ $# < 2 ]]; then
    echo "${MAGENTA}${BOLD}Unknown call format${RESET}"
    help
fi

readonly SED="$($IS_OSX && echo 'sed -E' || echo 'sed -r')"
readonly WC_NAME=$1

echo -e "\nuse WC_BIN: $( [ $WC_BIN ] && echo $WC_BIN || echo "$HOME (default)" )"

[ $WC_BIN ] || WC_BIN="$HOME"
WC_BIN="$(echo $WC_BIN | $SED 's|/$||')"
readonly WC_BASE_PATH="$(echo $WC_BIN/$WC_NAME | $SED 's|/+|/|')"

echo -e "\nuse WC_BASE_PATH: $WC_BASE_PATH"

readonly RAW_PROJECTS=$2
readonly YXWEB_PATH=report/templates/YxWeb

NEXT_ACTIONS_HINT="$(echo -e "\033[32m–î–∞–ª—å–Ω–µ–π—à–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:\n")"

readonly CLONE_BRANCH_OPT="$([[ $(echo $CLONE_BRANCH) ]] && echo "--branch $CLONE_BRANCH")"
readonly IS_OSX=$([[ $(uname) = Darwin ]] && echo True)

# ####################
# COMMON FUNCTIONS
# ####################

function trim_multiline()
{
    $SED 's/^\s+|\s+$//g'
}

function open_or_print() {
    echo open $1
    [[ $(uname) = Darwin && $(which open) && $IS_MAKE ]] && open $1
}


# ####################
#
# FIJI PREPROCESSING
#
# FIJI is the Union Repos of MM
#
# ####################

# —Å–ø–∏—Å–æ–∫ fiji-–ø—Ä–æ–µ–∫—Ç–æ–≤
# delimeter="\n"
# @example images3 video_touch_phone
fiji_projects="$(cat $HOME/dotfiles/extra/fiji-projects | sort)"
# echo -e debug "fiji_projects:\n" "$fiji_projects"

# —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –≤—Ç–æ—Ä—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º
# –ó–∞–º–µ–Ω–∏—Ç—å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å "+" –Ω–∞ "\n"
given_projects="$(echo $RAW_PROJECTS | $SED 's/\+/\n/g' | sort)"
# echo -e debug "given_projects:\n" "$given_projects"

# —Ç–æ–ª—å–∫–æ –Ω–µ fiji-–ø—Ä–æ–µ–∫—Ç—ã
given_no_fiji_projects="$(comm -13 <(echo "$fiji_projects") <(echo "$given_projects") | trim_multiline)"
# echo -e debug "given_no_fiji_projects:\n" "$given_no_fiji_projects"

# –ï—Å–ª–∏ –ª–∏ –≤ —Å–ø–∏—Å–∫–µ –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è —Ä–∞–∑–≤—ë—Ä—Ç—ã–≤–∞–Ω–∏—è fiji-–ø—Ä–æ–µ–∫—Ç—ã
given_fiji_projects="$(comm -12 <(echo "$fiji_projects") <(echo "$given_projects") | trim_multiline)"
# echo -e debug "given_fiji_projects:\n" "$given_fiji_projects"

function get_fiji_projects_new_format()
{
    for project in ${given_fiji_projects//\\n/ }; do
        project="${project/3/_desktop}" #images3 -> images_deskpad
        project="${project/_//}" # video_touch_phone -> video/touch_phone
        project="${project//_/-}" # images_deskpad -> video/deskpad
        echo "$project"
    done
}
fiji_projects_new_format="$(get_fiji_projects_new_format)"
# echo -e debug "fiji_projects_new_format:\n" "$fiji_projects_new_format"

# fiji-–ø—Ä–æ–µ–∫—Ç—ã (images3, video_touch_phone, –∏ –¥—Ä.) —É–¥–∞–ª—è—é—Ç—Å—è –∏–∑ —Å–ø–∏—Å–∫–∞ –∏ –∑–∞–º–µ–Ω—è—é—Ç—Å—è –Ω–∞ fiji
PROJECTS="$given_no_fiji_projects"
if [[ "$given_fiji_projects" ]]; then PROJECTS="fiji\n$PROJECTS"; fi

# ####################
# MAIN FUNCTIONS
# ####################

function setup_repo_variables()
{

    if [[ $PROJECT == fiji ]]; then
        ORG=mm-interfaces
        ORG_ALIAS=mm
        REPO="$PROJECT"
    else
        ORG=serp
        ORG_ALIAS=serp
        REPO=${PROJECT//_/-}
    fi

}

function clone_repo()
{

    # MM fiji
    if [[ "$given_fiji_projects" ]]; then

        GIT_CLONE="git clone $CLONE_BRANCH_OPT git@github.yandex-team.ru:$ORG/$REPO ."
        echo $GIT_CLONE
        $GIT_CLONE
        [ $? == 0 ] || exit 1

        # –ó–∞–∫—ç—à–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–ª—å(-–∏) —Å–±–æ—Ä–∫–∏
        # –º–µ–Ω—è—Ç—å —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø–∏—Å–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤ –Ω–∞ –Ω–æ–≤—ã–π
        [[ "$fiji_projects_new_format" ]] && echo "$fiji_projects_new_format" | sed 's/fiji/all/g' > .project

        PROJECT_DIR="$WC_BASE_PATH"

    # –°–ï–†–ü
    else

        mkdir -p $WC_BASE_PATH/$YXWEB_PATH
        ln -s $YXWEB_PATH/$PROJECT $PROJECT
        cd $YXWEB_PATH
        git clone git@github.yandex-team.ru:$ORG/$REPO $PROJECT
        [ $? == 0 ] || exit 1

        PROJECT_DIR="$WC_BASE_PATH/$PROJECT"

    fi

    [ $NEW_BRANCH ] && git co -b $WC_NAME/$NEW_BRANCH

    # TODO: –°–ï–†–ü & MM —Ä–∞–∑–≤—ë—Ä—Ç—ã–≤–∞–Ω–∏–µ –ª—é–±—ã—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ —Ç–∏–ø–∞ images-touch-viewer

}

function create_symlinks()
{

    # –°–æ–∑–¥–∞—ë–º —Å–∏–º–ª–∏–Ω–∫ video -> video2 (–∫–æ—Å—Ç—ã–ª—å –¥–ª—è —Å—Ç–∞—Ç–∏–∫–∏ video2)
    [[ $PROJECT == video2 ]] && ln -s video2 video && echo -e "\n–°–∏–º–ª–∏–Ω–∫–∏ —Å—Ç–∞—Ç–∏–∫–∏ —Å–æ–∑–¥–∞–Ω—ã"

    # –°–æ–∑–¥–∞—ë–º —Å–∏–º–ª–∏–Ω–∫–∏ web4 -> web3, web_touch_phone (–∫–æ—Å—Ç—ã–ª—å –¥–ª—è —Å—Ç–∞—Ç–∏–∫–∏)
    [[ $PROJECT == web4 ]] && ln -s web4 web3 && ln -s web4 web_touch_phone && echo -e "\n–°–∏–º–ª–∏–Ω–∫–∏ —Å—Ç–∞—Ç–∏–∫–∏ —Å–æ–∑–¥–∞–Ω—ã"

}

function build_project()
{

        cd $PROJECT_DIR
        echo -e "\ni'm here: $(pwd -P), make ¬´${PROJECT}¬ª...\n"

        if [[ $PROJECT == web4 ]]; then
            sudo make build # –ß—Ç–æ–±—ã –Ω–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å –¥–æ–ª–≥–∏–µ —Ç–µ—Å—Ç—ã
        else
            make
        fi

}

function open_or_print_project_link()
{

    if [[ $ORG == "mm-interfaces" ]]; then
        open_or_print "$(wcurl)"
    fi

}

# ####################
# MAIN LOOP
# ####################

for PROJECT in ${PROJECTS//\\n/ }; do

    echo -e "\nprocess PROJECT: $PROJECT..."

    echo -e "\nsetup_repo_variables..."
    setup_repo_variables

    mkdir -p $WC_BASE_PATH; cd $WC_BASE_PATH

    echo -e "\nclone_repo..."
    clone_repo

    echo -e "\ncreate_symlinks..."
    create_symlinks

    echo -e "\nprepare tips..."
    if [[ $IS_MAKE ]]; then
        build_project
    else
        NEXT_ACTIONS_HINT="$NEXT_ACTIONS_HINT\n     make"
    fi

    NEXT_ACTIONS_HINT="$NEXT_ACTIONS_HINT\n\nüìã  –°—Å—ã–ª–∫–∞:\n     $(open_or_print_project_link)\n"

    echo -e "\nproject ¬´${PROJECT}¬ª is ready!"

done


# ####################
# HINTS
# ####################


# –í—ã–≤–µ—Å—Ç–∏ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ –¥–∞–ª—å–Ω–µ–π—à–∏–º –¥–µ–π—Å—Ç–≤–∏—è–º
cd $WC_BASE_PATH
echo -e "\n‚úÖ  $NEXT_ACTIONS_HINT\033[0m"

# –°–æ–∑–¥–∞–µ–º tmux-—Å–µ—Å—Å–∏—é –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ —Ü–∏–∫–ª–∞
if [[ $IS_TMUX == 1 ]]; then
    cd $PROJECT_DIR
    tmux -2 -S /tmp/tm-`whoami` new-session -s $WC_NAME "tmux source-file $HOME/dotfiles/.tmux-default-session-$ORG_ALIAS"
fi
